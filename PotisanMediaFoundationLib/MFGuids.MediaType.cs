#pragma warning disable CA1707 // 識別子はアンダースコアを含むことはできません

namespace Potisan.Windows.MediaFoundation;

public static class MFMediaTypeAttributeGuids
{
	// core info for all types

	public static Guid MF_MT_MAJOR_TYPE => new(0x48eba18e, 0xf8c9, 0x4687, 0xbf, 0x11, 0x0a, 0x74, 0xc9, 0xf9, 0x6a, 0x8f);
	public static Guid MF_MT_SUBTYPE => new(0xf7e34c9a, 0x42e8, 0x4714, 0xb7, 0x4b, 0xcb, 0x29, 0xd7, 0x2c, 0x35, 0xe5);
	public static Guid MF_MT_ALL_SAMPLES_INDEPENDENT => new(0xc9173739, 0x5e56, 0x461c, 0xb7, 0x13, 0x46, 0xfb, 0x99, 0x5c, 0xb9, 0x5f);
	public static Guid MF_MT_FIXED_SIZE_SAMPLES => new(0xb8ebefaf, 0xb718, 0x4e04, 0xb0, 0xa9, 0x11, 0x67, 0x75, 0xe3, 0x32, 0x1b);
	public static Guid MF_MT_COMPRESSED => new(0x3afd0cee, 0x18f2, 0x4ba5, 0xa1, 0x10, 0x8b, 0xea, 0x50, 0x2e, 0x1f, 0x92);
	public static Guid MF_MT_SAMPLE_SIZE => new(0xdad3ab78, 0x1990, 0x408b, 0xbc, 0xe2, 0xeb, 0xa6, 0x73, 0xda, 0xcc, 0x10);
	public static Guid MF_MT_WRAPPED_TYPE => new(0x4d3f7b23, 0xd02f, 0x4e6c, 0x9b, 0xee, 0xe4, 0xbf, 0x2c, 0x6c, 0x69, 0x5d);

	//
	// Media Type & Sample attributes for 3D Video
	//

	public static Guid MF_MT_VIDEO_3D => new(0xcb5e88cf, 0x7b5b, 0x476b, 0x85, 0xaa, 0x1c, 0xa5, 0xae, 0x18, 0x75, 0x55);

	//// Enum describing the packing for 3D video frames
	//typedef enum _MFVideo3DFormat
	//{
	//	MFVideo3DSampleFormat_BaseView = 0,//	MFVideo3DSampleFormat_MultiView = 1,//	MFVideo3DSampleFormat_Packed_LeftRight = 2,//	MFVideo3DSampleFormat_Packed_TopBottom = 3,//}
	//MFVideo3DFormat;

	public static Guid MF_MT_VIDEO_3D_FORMAT => new(0x5315d8a0, 0x87c5, 0x4697, 0xb7, 0x93, 0x66, 0x6, 0xc6, 0x7c, 0x4, 0x9b);
	public static Guid MF_MT_VIDEO_3D_NUM_VIEWS => new(0xbb077e8a, 0xdcbf, 0x42eb, 0xaf, 0x60, 0x41, 0x8d, 0xf9, 0x8a, 0xa4, 0x95);
	public static Guid MF_MT_VIDEO_3D_LEFT_IS_BASE => new(0x6d4b7bff, 0x5629, 0x4404, 0x94, 0x8c, 0xc6, 0x34, 0xf4, 0xce, 0x26, 0xd4);
	public static Guid MF_MT_VIDEO_3D_FIRST_IS_LEFT => new(0xec298493, 0xada, 0x4ea1, 0xa4, 0xfe, 0xcb, 0xbd, 0x36, 0xce, 0x93, 0x31);
	public static Guid MFSampleExtension_3DVideo => new(0xf86f97a4, 0xdd54, 0x4e2e, 0x9a, 0x5e, 0x55, 0xfc, 0x2d, 0x74, 0xa0, 0x05);

	//// Enum describing the packing for 3D video frames in a sample
	//typedef enum _MFVideo3DSampleFormat
	//{
	//	MFSampleExtension_3DVideo_MultiView = 1,//	MFSampleExtension_3DVideo_Packed = 0,//}
	//MFVideo3DSampleFormat;

	// public static Guid MFSampleExtension_3DVideo_SampleFormat => new(0x8671772, 0xe36f, 0x4cff, 0x97, 0xb3, 0xd7, 0x2e, 0x20, 0x98, 0x7a, 0x48);

	//// Enum describing the video rotation formats
	//// Only the values of 0, 90, 180, and 270 are valid.
	//# ifndef _MFVideoRotationFormat_
	//#define _MFVideoRotationFormat_
	//typedef enum _MFVideoRotationFormat
	//{
	//	MFVideoRotationFormat_0 = 0,//	MFVideoRotationFormat_90 = 90,//	MFVideoRotationFormat_180 = 180,//	MFVideoRotationFormat_270 = 270,//}
	//MFVideoRotationFormat;

	public static Guid MF_MT_VIDEO_ROTATION => new(0xc380465d, 0x2271, 0x428c, 0x9b, 0x83, 0xec, 0xea, 0x3b, 0x4a, 0x85, 0xc1);

	//public static Guid MF_DEVICESTREAM_MULTIPLEXED_MANAGER => new(0x6ea542b0, 0x281f, 0x4231, 0xa4, 0x64, 0xfe, 0x2f, 0x50, 0x22, 0x50, 0x1c);    
	//public static Guid MF_MEDIATYPE_MULTIPLEXED_MANAGER => new(0x13c78fb5, 0xf275, 0x4ea0, 0xbb, 0x5f, 0x2, 0x49, 0x83, 0x2b, 0xd, 0x6e);
	//public static Guid MFSampleExtension_MULTIPLEXED_MANAGER => new(0x8dcdee79, 0x6b5a, 0x4c45, 0x8d, 0xb9, 0x20, 0xb3, 0x95, 0xf0, 0x2f, 0xcf);

	//STDAPI MFCreateMuxStreamAttributes(
	//    _In_ IMFCollection *pAttributesToMux,//    _COM_Outptr_ IMFAttributes**ppMuxAttribs
	//);

	//STDAPI MFCreateMuxStreamMediaType(
	//    _In_ IMFCollection *pMediaTypesToMux,//    _COM_Outptr_ IMFMediaType**ppMuxMediaType
	//);

	//STDAPI MFCreateMuxStreamSample(
	//    _In_ IMFCollection *pSamplesToMux,//    _COM_Outptr_ IMFSample**ppMuxSample
	//);

	public static Guid MF_MT_SECURE => new(0xc5acc4fd, 0x0304, 0x4ecf, 0x80, 0x9f, 0x47, 0xbc, 0x97, 0xff, 0x63, 0xbd);
	public static Guid MF_DEVICESTREAM_ATTRIBUTE_FRAMESOURCE_TYPES => new(0x17145fd1, 0x1b2b, 0x423c, 0x80, 0x1, 0x2b, 0x68, 0x33, 0xed, 0x35, 0x88);
	public static Guid MF_MT_ALPHA_MODE => new(0x5D959B0D, 0x4CBF, 0x4D04, 0x91, 0x9F, 0x3F, 0x5F, 0x7F, 0x28, 0x42, 0x11);

	//typedef enum _MFDepthMeasurement
	//{
	//    DistanceToFocalPlane        = 0,//    DistanceToOpticalCenter     = 1,//} MFDepthMeasurement;

	public static Guid MF_MT_DEPTH_MEASUREMENT => new(0xfd5ac489, 0x917, 0x4bb6, 0x9d, 0x54, 0x31, 0x22, 0xbf, 0x70, 0x14, 0x4b);
	public static Guid MF_MT_DEPTH_VALUE_UNIT => new(0x21a800f5, 0x3189, 0x4797, 0xbe, 0xba, 0xf1, 0x3c, 0xd9, 0xa3, 0x1a, 0x5e);
	public static Guid MF_MT_VIDEO_NO_FRAME_ORDERING => new(0x3f5b106f, 0x6bc2, 0x4ee3, 0xb7, 0xed, 0x89, 0x2, 0xc1, 0x8f, 0x53, 0x51);
	public static Guid MF_MT_VIDEO_H264_NO_FMOASO => new(0xed461cd6, 0xec9f, 0x416a, 0xa8, 0xa3, 0x26, 0xd7, 0xd3, 0x10, 0x18, 0xd7);

	// 
	// Renderer Extensions
	//

	//public static Guid MFSampleExtension_ForwardedDecodeUnits => new(0x424c754c, 0x97c8, 0x48d6, 0x87, 0x77, 0xfc, 0x41, 0xf7, 0xb6, 0x8, 0x79);
	//public static Guid MFSampleExtension_TargetGlobalLuminance => new(0x3f60ef36, 0x31ef, 0x4daf, 0x83, 0x60, 0x94, 0x3, 0x97, 0xe4, 0x1e, 0xf3);

	//typedef enum _MF_CUSTOM_DECODE_UNIT_TYPE
	//{
	//    MF_DECODE_UNIT_NAL = 0,//    MF_DECODE_UNIT_SEI = 1
	//} MF_CUSTOM_DECODE_UNIT_TYPE;
	// public static Guid MFSampleExtension_ForwardedDecodeUnitType => new(0x89e57c7, 0x47d3, 0x4a26, 0xbf, 0x9c, 0x4b, 0x64, 0xfa, 0xfb, 0x5d, 0x1e);
	public static Guid MF_MT_FORWARD_CUSTOM_NALU => new(0xed336efd, 0x244f, 0x428d, 0x91, 0x53, 0x28, 0xf3, 0x99, 0x45, 0x88, 0x90);
	public static Guid MF_MT_FORWARD_CUSTOM_SEI => new(0xe27362f1, 0xb136, 0x41d1, 0x95, 0x94, 0x3a, 0x7e, 0x4f, 0xeb, 0xf2, 0xd1);
	public static Guid MF_MT_VIDEO_RENDERER_EXTENSION_PROFILE => new(0x8437d4b9, 0xd448, 0x4fcd, 0x9b, 0x6b, 0x83, 0x9b, 0xf9, 0x6c, 0x77, 0x98);

	public static Guid MF_DECODER_FWD_CUSTOM_SEI_DECODE_ORDER => new(0xf13bbe3c, 0x36d4, 0x410a, 0xb9, 0x85, 0x7a, 0x95, 0x1a, 0x1e, 0x62, 0x94);
	public static Guid MF_VIDEO_RENDERER_EFFECT_APP_SERVICE_NAME => new(0xc6052a80, 0x6d9c, 0x40a3, 0x9d, 0xb8, 0xf0, 0x27, 0xa2, 0x5c, 0x9a, 0xb9);

	//
	// AUDIO data
	//

	public static Guid MF_MT_AUDIO_NUM_CHANNELS => new(0x37e48bf5, 0x645e, 0x4c5b, 0x89, 0xde, 0xad, 0xa9, 0xe2, 0x9b, 0x69, 0x6a);
	public static Guid MF_MT_AUDIO_SAMPLES_PER_SECOND => new(0x5faeeae7, 0x0290, 0x4c31, 0x9e, 0x8a, 0xc5, 0x34, 0xf6, 0x8d, 0x9d, 0xba);
	public static Guid MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND => new(0xfb3b724a, 0xcfb5, 0x4319, 0xae, 0xfe, 0x6e, 0x42, 0xb2, 0x40, 0x61, 0x32);
	public static Guid MF_MT_AUDIO_AVG_BYTES_PER_SECOND => new(0x1aab75c8, 0xcfef, 0x451c, 0xab, 0x95, 0xac, 0x03, 0x4b, 0x8e, 0x17, 0x31);
	public static Guid MF_MT_AUDIO_BLOCK_ALIGNMENT => new(0x322de230, 0x9eeb, 0x43bd, 0xab, 0x7a, 0xff, 0x41, 0x22, 0x51, 0x54, 0x1d);
	public static Guid MF_MT_AUDIO_BITS_PER_SAMPLE => new(0xf2deb57f, 0x40fa, 0x4764, 0xaa, 0x33, 0xed, 0x4f, 0x2d, 0x1f, 0xf6, 0x69);
	public static Guid MF_MT_AUDIO_VALID_BITS_PER_SAMPLE => new(0xd9bf8d6a, 0x9530, 0x4b7c, 0x9d, 0xdf, 0xff, 0x6f, 0xd5, 0x8b, 0xbd, 0x06);
	public static Guid MF_MT_AUDIO_SAMPLES_PER_BLOCK => new(0xaab15aac, 0xe13a, 0x4995, 0x92, 0x22, 0x50, 0x1e, 0xa1, 0x5c, 0x68, 0x77);
	public static Guid MF_MT_AUDIO_CHANNEL_MASK => new(0x55fb5765, 0x644a, 0x4caf, 0x84, 0x79, 0x93, 0x89, 0x83, 0xbb, 0x15, 0x88);

	////
	//// MF_MT_AUDIO_FOLDDOWN_MATRIX stores folddown structure from multichannel to stereo
	////
	//typedef struct _MFFOLDDOWN_MATRIX
	//{
	//	uint cbSize;
	//	uint cSrcChannels; // number of source channels
	//	uint cDstChannels; // number of destination channels
	//	uint dwChannelMask; // mask
	//	LONG Coeff[64];
	//}
	//MFFOLDDOWN_MATRIX;

	public static Guid MF_MT_AUDIO_FOLDDOWN_MATRIX => new(0x9d62927c, 0x36be, 0x4cf2, 0xb5, 0xc4, 0xa3, 0x92, 0x6e, 0x3e, 0x87, 0x11);
	public static Guid MF_MT_AUDIO_WMADRC_PEAKREF => new(0x9d62927d, 0x36be, 0x4cf2, 0xb5, 0xc4, 0xa3, 0x92, 0x6e, 0x3e, 0x87, 0x11);
	public static Guid MF_MT_AUDIO_WMADRC_PEAKTARGET => new(0x9d62927e, 0x36be, 0x4cf2, 0xb5, 0xc4, 0xa3, 0x92, 0x6e, 0x3e, 0x87, 0x11);
	public static Guid MF_MT_AUDIO_WMADRC_AVGREF => new(0x9d62927f, 0x36be, 0x4cf2, 0xb5, 0xc4, 0xa3, 0x92, 0x6e, 0x3e, 0x87, 0x11);
	public static Guid MF_MT_AUDIO_WMADRC_AVGTARGET => new(0x9d629280, 0x36be, 0x4cf2, 0xb5, 0xc4, 0xa3, 0x92, 0x6e, 0x3e, 0x87, 0x11);
	public static Guid MF_MT_AUDIO_PREFER_WAVEFORMATEX => new(0xa901aaba, 0xe037, 0x458a, 0xbd, 0xf6, 0x54, 0x5b, 0xe2, 0x07, 0x40, 0x42);

	//
	// AUDIO - AAC extra data
	//

	public static Guid MF_MT_AAC_PAYLOAD_TYPE => new(0xbfbabe79, 0x7434, 0x4d1c, 0x94, 0xf0, 0x72, 0xa3, 0xb9, 0xe1, 0x71, 0x88);

	public static Guid MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION => new(0x7632f0e6, 0x9538, 0x4d61, 0xac, 0xda, 0xea, 0x29, 0xc8, 0xc1, 0x44, 0x56);

	//
	// AUDIO - FLAC extra data
	//

	public static Guid MF_MT_AUDIO_FLAC_MAX_BLOCK_SIZE => new(0x8b81adae, 0x4b5a, 0x4d40, 0x80, 0x22, 0xf3, 0x8d, 0x9, 0xca, 0x3c, 0x5c);

	//
	// AUDIO - Spatial Audio Sample extra data
	//

	public static Guid MF_MT_SPATIAL_AUDIO_MAX_DYNAMIC_OBJECTS => new(0xdcfba24a, 0x2609, 0x4240, 0xa7, 0x21, 0x3f, 0xae, 0xa7, 0x6a, 0x4d, 0xf9);
	public static Guid MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_FORMAT_ID => new(0x2ab71bc0, 0x6223, 0x4ba7, 0xad, 0x64, 0x7b, 0x94, 0xb4, 0x7a, 0xe7, 0x92);
	public static Guid MF_MT_SPATIAL_AUDIO_OBJECT_METADATA_LENGTH => new(0x94ba8be, 0xd723, 0x489f, 0x92, 0xfa, 0x76, 0x67, 0x77, 0xb3, 0x47, 0x26);
	public static Guid MF_MT_SPATIAL_AUDIO_MAX_METADATA_ITEMS => new(0x11aa80b4, 0xe0da, 0x47c6, 0x80, 0x60, 0x96, 0xc1, 0x25, 0x9a, 0xe5, 0xd);
	public static Guid MF_MT_SPATIAL_AUDIO_MIN_METADATA_ITEM_OFFSET_SPACING => new(0x83e96ec9, 0x1184, 0x417e, 0x82, 0x54, 0x9f, 0x26, 0x91, 0x58, 0xfc, 0x6);
	public static Guid MF_MT_SPATIAL_AUDIO_DATA_PRESENT => new(0x6842f6e7, 0xd43e, 0x4ebb, 0x9c, 0x9c, 0xc9, 0x6f, 0x41, 0x78, 0x48, 0x63);
	public static Guid MF_MT_SPATIAL_AUDIO_IS_PREVIRTUALIZED => new(0x4eacab51, 0xffe5, 0x421a, 0xa2, 0xa7, 0x8b, 0x74, 0x09, 0xa1, 0xca, 0xc4);
	public static Guid MF_MT_MPEGH_AUDIO_PROFILE_LEVEL_INDICATION => new(0x51267a39, 0xdd0c, 0x4bb9, 0xa7, 0xbd, 0x91, 0x73, 0xad, 0x4b, 0x13, 0x1c);

	//
	// VIDEO core data
	//

	public static Guid MF_MT_FRAME_SIZE => new(0x1652c33d, 0xd6b2, 0x4012, 0xb8, 0x34, 0x72, 0x03, 0x08, 0x49, 0xa3, 0x7d);
	public static Guid MF_MT_FRAME_RATE => new(0xc459a2e8, 0x3d2c, 0x4e44, 0xb1, 0x32, 0xfe, 0xe5, 0x15, 0x6c, 0x7b, 0xb0);
	public static Guid MF_MT_PIXEL_ASPECT_RATIO => new(0xc6376a1e, 0x8d0a, 0x4027, 0xbe, 0x45, 0x6d, 0x9a, 0x0a, 0xd3, 0x9b, 0xb6);
	public static Guid MF_MT_DRM_FLAGS => new(0x8772f323, 0x355a, 0x4cc7, 0xbb, 0x78, 0x6d, 0x61, 0xa0, 0x48, 0xae, 0x82);
	public static Guid MF_MT_TIMESTAMP_CAN_BE_DTS => new(0x24974215, 0x1b7b, 0x41e4, 0x86, 0x25, 0xac, 0x46, 0x9f, 0x2d, 0xed, 0xaa);

	//typedef enum _MFVideoDRMFlags
	//{
	//	MFVideoDRMFlag_None = 0,//	MFVideoDRMFlag_AnalogProtected = 1,//	MFVideoDRMFlag_DigitallyProtected = 2,//}
	//MFVideoDRMFlags;

	public static Guid MF_MT_PAD_CONTROL_FLAGS => new(0x4d0e73e5, 0x80ea, 0x4354, 0xa9, 0xd0, 0x11, 0x76, 0xce, 0xb0, 0x28, 0xea);

	//typedef enum _MFVideoPadFlags
	//{
	//	MFVideoPadFlag_PAD_TO_None = 0,//	MFVideoPadFlag_PAD_TO_4x3 = 1,//	MFVideoPadFlag_PAD_TO_16x9 = 2
	//}
	//MFVideoPadFlags;

	public static Guid MF_MT_SOURCE_CONTENT_HINT => new(0x68aca3cc, 0x22d0, 0x44e6, 0x85, 0xf8, 0x28, 0x16, 0x71, 0x97, 0xfa, 0x38);

	//typedef enum _MFVideoSrcContentHintFlags
	//{
	//	MFVideoSrcContentHintFlag_None = 0,//	MFVideoSrcContentHintFlag_16x9 = 1,//	MFVideoSrcContentHintFlag_235_1 = 2
	//}
	//MFVideoSrcContentHintFlags;

	public static Guid MF_MT_VIDEO_CHROMA_SITING => new(0x65df2370, 0xc773, 0x4c33, 0xaa, 0x64, 0x84, 0x3e, 0x06, 0x8e, 0xfb, 0x0c);
	public static Guid MF_MT_INTERLACE_MODE => new(0xe2724bb8, 0xe676, 0x4806, 0xb4, 0xb2, 0xa8, 0xd6, 0xef, 0xb4, 0x4c, 0xcd);
	public static Guid MF_MT_TRANSFER_FUNCTION => new(0x5fb0fce9, 0xbe5c, 0x4935, 0xa8, 0x11, 0xec, 0x83, 0x8f, 0x8e, 0xed, 0x93);
	public static Guid MF_MT_VIDEO_PRIMARIES => new(0xdbfbe4d7, 0x0740, 0x4ee0, 0x81, 0x92, 0x85, 0x0a, 0xb0, 0xe2, 0x19, 0x35);
	public static Guid MF_MT_MAX_LUMINANCE_LEVEL => new(0x50253128, 0xc110, 0x4de4, 0x98, 0xae, 0x46, 0xa3, 0x24, 0xfa, 0xe6, 0xda);
	public static Guid MF_MT_MAX_FRAME_AVERAGE_LUMINANCE_LEVEL => new(0x58d4bf57, 0x6f52, 0x4733, 0xa1, 0x95, 0xa9, 0xe2, 0x9e, 0xcf, 0x9e, 0x27);
	public static Guid MF_MT_MAX_MASTERING_LUMINANCE => new(0xd6c6b997, 0x272f, 0x4ca1, 0x8d, 0x0, 0x80, 0x42, 0x11, 0x1a, 0xf, 0xf6);
	public static Guid MF_MT_MIN_MASTERING_LUMINANCE => new(0x839a4460, 0x4e7e, 0x4b4f, 0xae, 0x79, 0xcc, 0x8, 0x90, 0x5c, 0x7b, 0x27);
	public static Guid MF_MT_DECODER_USE_MAX_RESOLUTION => new(0x4c547c24, 0xaf9a, 0x4f38, 0x96, 0xad, 0x97, 0x87, 0x73, 0xcf, 0x53, 0xe7);
	public static Guid MF_MT_DECODER_MAX_DPB_COUNT => new(0x67be144c, 0x88b7, 0x4ca9, 0x96, 0x28, 0xc8, 0x8, 0xd5, 0x26, 0x22, 0x17);
	public static Guid MF_MT_CUSTOM_VIDEO_PRIMARIES => new(0x47537213, 0x8cfb, 0x4722, 0xaa, 0x34, 0xfb, 0xc9, 0xe2, 0x4d, 0x77, 0xb8);

	//typedef struct _MT_CUSTOM_VIDEO_PRIMARIES {
	//    float fRx;
	//    float fRy;
	//    float fGx;
	//    float fGy;
	//    float fBx;
	//    float fBy;
	//    float fWx;
	//    float fWy;
	//} MT_CUSTOM_VIDEO_PRIMARIES;

	public static Guid MF_MT_YUV_MATRIX => new(0x3e23d450, 0x2c75, 0x4d25, 0xa0, 0x0e, 0xb9, 0x16, 0x70, 0xd1, 0x23, 0x27);
	public static Guid MF_MT_VIDEO_LIGHTING => new(0x53a0529c, 0x890b, 0x4216, 0x8b, 0xf9, 0x59, 0x93, 0x67, 0xad, 0x6d, 0x20);
	public static Guid MF_MT_VIDEO_NOMINAL_RANGE => new(0xc21b8ee5, 0xb956, 0x4071, 0x8d, 0xaf, 0x32, 0x5e, 0xdf, 0x5c, 0xab, 0x11);
	public static Guid MF_MT_GEOMETRIC_APERTURE => new(0x66758743, 0x7e5f, 0x400d, 0x98, 0x0a, 0xaa, 0x85, 0x96, 0xc8, 0x56, 0x96);
	public static Guid MF_MT_MINIMUM_DISPLAY_APERTURE => new(0xd7388766, 0x18fe, 0x48c6, 0xa1, 0x77, 0xee, 0x89, 0x48, 0x67, 0xc8, 0xc4);
	public static Guid MF_MT_PAN_SCAN_APERTURE => new(0x79614dde, 0x9187, 0x48fb, 0xb8, 0xc7, 0x4d, 0x52, 0x68, 0x9d, 0xe6, 0x49);
	public static Guid MF_MT_PAN_SCAN_ENABLED => new(0x4b7f6bc3, 0x8b13, 0x40b2, 0xa9, 0x93, 0xab, 0xf6, 0x30, 0xb8, 0x20, 0x4e);
	public static Guid MF_MT_AVG_BITRATE => new(0x20332624, 0xfb0d, 0x4d9e, 0xbd, 0x0d, 0xcb, 0xf6, 0x78, 0x6c, 0x10, 0x2e);
	public static Guid MF_MT_AVG_BIT_ERROR_RATE => new(0x799cabd6, 0x3508, 0x4db4, 0xa3, 0xc7, 0x56, 0x9c, 0xd5, 0x33, 0xde, 0xb1);
	public static Guid MF_MT_MAX_KEYFRAME_SPACING => new(0xc16eb52b, 0x73a1, 0x476f, 0x8d, 0x62, 0x83, 0x9d, 0x6a, 0x02, 0x06, 0x52);
	public static Guid MF_MT_USER_DATA => new(0xb6bc765f, 0x4c3b, 0x40a4, 0xbd, 0x51, 0x25, 0x35, 0xb6, 0x6f, 0xe0, 0x9d);
	public static Guid MF_MT_OUTPUT_BUFFER_NUM => new(0xa505d3ac, 0xf930, 0x436e, 0x8e, 0xde, 0x93, 0xa5, 0x09, 0xce, 0x23, 0xb2);
	public static Guid MF_MT_REALTIME_CONTENT => new(0xbb12d222, 0x2bdb, 0x425e, 0x91, 0xec, 0x23, 0x08, 0xe1, 0x89, 0xa5, 0x8f);

	//
	// VIDEO - uncompressed format data
	//

	public static Guid MF_MT_DEFAULT_STRIDE => new(0x644b4e48, 0x1e02, 0x4516, 0xb0, 0xeb, 0xc0, 0x1c, 0xa9, 0xd4, 0x9a, 0xc6);
	public static Guid MF_MT_PALETTE => new(0x6d283f42, 0x9846, 0x4410, 0xaf, 0xd9, 0x65, 0x4d, 0x50, 0x3b, 0x1a, 0x54);
	public static Guid MF_MT_AM_FORMAT_TYPE => new(0x73d1072d, 0x1870, 0x4174, 0xa0, 0x63, 0x29, 0xff, 0x4f, 0xf6, 0xc1, 0x1e);

	//
	// VIDEO - Generic compressed video extra data
	//

	public static Guid MF_MT_VIDEO_PROFILE => new(0xad76a80b, 0x2d5c, 0x4e0b, 0xb3, 0x75, 0x64, 0xe5, 0x20, 0x13, 0x70, 0x36);
	public static Guid MF_MT_VIDEO_LEVEL => new(0x96f66574, 0x11c5, 0x4015, 0x86, 0x66, 0xbf, 0xf5, 0x16, 0x43, 0x6d, 0xa7);

	//
	// VIDEO - MPEG1/2 extra data
	//

	public static Guid MF_MT_MPEG_START_TIME_CODE => new(0x91f67885, 0x4333, 0x4280, 0x97, 0xcd, 0xbd, 0x5a, 0x6c, 0x03, 0xa0, 0x6e);
	public static Guid MF_MT_MPEG2_PROFILE => new(0xad76a80b, 0x2d5c, 0x4e0b, 0xb3, 0x75, 0x64, 0xe5, 0x20, 0x13, 0x70, 0x36);
	public static Guid MF_MT_MPEG2_LEVEL => new(0x96f66574, 0x11c5, 0x4015, 0x86, 0x66, 0xbf, 0xf5, 0x16, 0x43, 0x6d, 0xa7);
	public static Guid MF_MT_MPEG2_FLAGS => new(0x31e3991d, 0xf701, 0x4b2f, 0xb4, 0x26, 0x8a, 0xe3, 0xbd, 0xa9, 0xe0, 0x4b);
	public static Guid MF_MT_MPEG_SEQUENCE_HEADER => new(0x3c036de7, 0x3ad0, 0x4c9e, 0x92, 0x16, 0xee, 0x6d, 0x6a, 0xc2, 0x1c, 0xb3);
	public static Guid MF_MT_MPEG2_STANDARD => new(0xa20af9e8, 0x928a, 0x4b26, 0xaa, 0xa9, 0xf0, 0x5c, 0x74, 0xca, 0xc4, 0x7c);
	public static Guid MF_MT_MPEG2_TIMECODE => new(0x5229ba10, 0xe29d, 0x4f80, 0xa5, 0x9c, 0xdf, 0x4f, 0x18, 0x2, 0x7, 0xd2);
	public static Guid MF_MT_MPEG2_CONTENT_PACKET => new(0x825d55e4, 0x4f12, 0x4197, 0x9e, 0xb3, 0x59, 0xb6, 0xe4, 0x71, 0xf, 0x6);
	public static Guid MF_MT_MPEG2_ONE_FRAME_PER_PACKET => new(0x91a49eb5, 0x1d20, 0x4b42, 0xac, 0xe8, 0x80, 0x42, 0x69, 0xbf, 0x95, 0xed);
	public static Guid MF_MT_MPEG2_HDCP => new(0x168f1b4a, 0x3e91, 0x450f, 0xae, 0xa7, 0xe4, 0xba, 0xea, 0xda, 0xe5, 0xba);

	//
	// VIDEO - H264 extra data
	//

	public static Guid MF_MT_H264_MAX_CODEC_CONFIG_DELAY => new(0xf5929986, 0x4c45, 0x4fbb, 0xbb, 0x49, 0x6c, 0xc5, 0x34, 0xd0, 0x5b, 0x9b);
	public static Guid MF_MT_H264_SUPPORTED_SLICE_MODES => new(0xc8be1937, 0x4d64, 0x4549, 0x83, 0x43, 0xa8, 0x8, 0x6c, 0xb, 0xfd, 0xa5);
	public static Guid MF_MT_H264_SUPPORTED_SYNC_FRAME_TYPES => new(0x89a52c01, 0xf282, 0x48d2, 0xb5, 0x22, 0x22, 0xe6, 0xae, 0x63, 0x31, 0x99);
	public static Guid MF_MT_H264_RESOLUTION_SCALING => new(0xe3854272, 0xf715, 0x4757, 0xba, 0x90, 0x1b, 0x69, 0x6c, 0x77, 0x34, 0x57);
	public static Guid MF_MT_H264_SIMULCAST_SUPPORT => new(0x9ea2d63d, 0x53f0, 0x4a34, 0xb9, 0x4e, 0x9d, 0xe4, 0x9a, 0x7, 0x8c, 0xb3);
	public static Guid MF_MT_H264_SUPPORTED_RATE_CONTROL_MODES => new(0x6a8ac47e, 0x519c, 0x4f18, 0x9b, 0xb3, 0x7e, 0xea, 0xae, 0xa5, 0x59, 0x4d);
	public static Guid MF_MT_H264_MAX_MB_PER_SEC => new(0x45256d30, 0x7215, 0x4576, 0x93, 0x36, 0xb0, 0xf1, 0xbc, 0xd5, 0x9b, 0xb2);
	public static Guid MF_MT_H264_SUPPORTED_USAGES => new(0x60b1a998, 0xdc01, 0x40ce, 0x97, 0x36, 0xab, 0xa8, 0x45, 0xa2, 0xdb, 0xdc);
	public static Guid MF_MT_H264_CAPABILITIES => new(0xbb3bd508, 0x490a, 0x11e0, 0x99, 0xe4, 0x13, 0x16, 0xdf, 0xd7, 0x20, 0x85);
	public static Guid MF_MT_H264_SVC_CAPABILITIES => new(0xf8993abe, 0xd937, 0x4a8f, 0xbb, 0xca, 0x69, 0x66, 0xfe, 0x9e, 0x11, 0x52);
	public static Guid MF_MT_H264_USAGE => new(0x359ce3a5, 0xaf00, 0x49ca, 0xa2, 0xf4, 0x2a, 0xc9, 0x4c, 0xa8, 0x2b, 0x61);
	public static Guid MF_MT_H264_RATE_CONTROL_MODES => new(0x705177d8, 0x45cb, 0x11e0, 0xac, 0x7d, 0xb9, 0x1c, 0xe0, 0xd7, 0x20, 0x85);
	public static Guid MF_MT_H264_LAYOUT_PER_STREAM => new(0x85e299b2, 0x90e3, 0x4fe8, 0xb2, 0xf5, 0xc0, 0x67, 0xe0, 0xbf, 0xe5, 0x7a);
	public static Guid MF_MT_IN_BAND_PARAMETER_SET => new(0x75da5090, 0x910b, 0x4a03, 0x89, 0x6c, 0x7b, 0x89, 0x8f, 0xee, 0xa5, 0xaf);
	public static Guid MF_MT_MPEG4_TRACK_TYPE => new(0x54f486dd, 0x9327, 0x4f6d, 0x80, 0xab, 0x6f, 0x70, 0x9e, 0xbb, 0x4c, 0xce);
	public static Guid MF_MT_CONTAINER_RATE_SCALING => new(0x83877f5e, 0x444, 0x4e28, 0x84, 0x79, 0x6d, 0xb0, 0x98, 0x9b, 0x8c, 0x9);

	//
	// INTERLEAVED - DV extra data
	//

	public static Guid MF_MT_DV_AAUX_SRC_PACK_0 => new(0x84bd5d88, 0x0fb8, 0x4ac8, 0xbe, 0x4b, 0xa8, 0x84, 0x8b, 0xef, 0x98, 0xf3);
	public static Guid MF_MT_DV_AAUX_CTRL_PACK_0 => new(0xf731004e, 0x1dd1, 0x4515, 0xaa, 0xbe, 0xf0, 0xc0, 0x6a, 0xa5, 0x36, 0xac);
	public static Guid MF_MT_DV_AAUX_SRC_PACK_1 => new(0x720e6544, 0x0225, 0x4003, 0xa6, 0x51, 0x01, 0x96, 0x56, 0x3a, 0x95, 0x8e);
	public static Guid MF_MT_DV_AAUX_CTRL_PACK_1 => new(0xcd1f470d, 0x1f04, 0x4fe0, 0xbf, 0xb9, 0xd0, 0x7a, 0xe0, 0x38, 0x6a, 0xd8);
	public static Guid MF_MT_DV_VAUX_SRC_PACK => new(0x41402d9d, 0x7b57, 0x43c6, 0xb1, 0x29, 0x2c, 0xb9, 0x97, 0xf1, 0x50, 0x09);
	public static Guid MF_MT_DV_VAUX_CTRL_PACK => new(0x2f84e1c4, 0x0da1, 0x4788, 0x93, 0x8e, 0x0d, 0xfb, 0xfb, 0xb3, 0x4b, 0x48);

	//
	// ARBITRARY
	//

	////
	//// MT_ARBITRARY_HEADER stores information about the format of an arbitrary media type
	////
	//typedef struct _MT_ARBITRARY_HEADER
	//{
	//    GUID majortype;
	//    GUID subtype;
	//    [MarshalAs(UnmanagedType.Bool)] bool bFixedSizeSamples;
	//    [MarshalAs(UnmanagedType.Bool)] bool bTemporalCompression;
	//    ULONG lSampleSize;
	//    GUID formattype;
	//}
	//MT_ARBITRARY_HEADER;

	public static Guid MF_MT_ARBITRARY_HEADER => new(0x9e6bd6f5, 0x109, 0x4f95, 0x84, 0xac, 0x93, 0x9, 0x15, 0x3a, 0x19, 0xfc);
	public static Guid MF_MT_ARBITRARY_FORMAT => new(0x5a75b249, 0xd7d, 0x49a1, 0xa1, 0xc3, 0xe0, 0xd8, 0x7f, 0xc, 0xad, 0xe5);

	//
	// IMAGE
	//

	public static Guid MF_MT_IMAGE_LOSS_TOLERANT => new(0xed062cf4, 0xe34e, 0x4922, 0xbe, 0x99, 0x93, 0x40, 0x32, 0x13, 0x3d, 0x7c);
	public static Guid MF_MT_MPEG4_SAMPLE_DESCRIPTION => new(0x261e9d83, 0x9529, 0x4b8f, 0xa1, 0x11, 0x8b, 0x9c, 0x95, 0x0a, 0x81, 0xa9);
	public static Guid MF_MT_MPEG4_CURRENT_SAMPLE_ENTRY => new(0x9aa7e155, 0xb64a, 0x4c1d, 0xa5, 0x00, 0x45, 0x5d, 0x60, 0x0b, 0x65, 0x60);
	public static Guid MF_SD_AMBISONICS_SAMPLE3D_DESCRIPTION => new(0xf715cf3e, 0xa964, 0x4c3f, 0x94, 0xae, 0x9d, 0x6b, 0xa7, 0x26, 0x46, 0x41);
	public static Guid MF_MT_ORIGINAL_4CC => new(0xd7be3fe0, 0x2bc7, 0x492d, 0xb8, 0x43, 0x61, 0xa1, 0x91, 0x9b, 0x70, 0xc3);
	public static Guid MF_MT_ORIGINAL_WAVE_FORMAT_TAG => new(0x8cbbc843, 0x9fd9, 0x49c2, 0x88, 0x2f, 0xa7, 0x25, 0x86, 0xc4, 0x08, 0xad);

	//
	// Video Capture Media Type Attributes
	//

	public static Guid MF_MT_FRAME_RATE_RANGE_MIN => new(0xd2e7558c, 0xdc1f, 0x403f, 0x9a, 0x72, 0xd2, 0x8b, 0xb1, 0xeb, 0x3b, 0x5e);
	public static Guid MF_MT_FRAME_RATE_RANGE_MAX => new(0xe3371d41, 0xb4cf, 0x4a05, 0xbd, 0x4e, 0x20, 0xb8, 0x8b, 0xb2, 0xc4, 0xd6);
	public static Guid MF_LOW_LATENCY => new(0x9c27891a, 0xed7a, 0x40e1, 0x88, 0xe8, 0xb2, 0x27, 0x27, 0xa0, 0x24, 0xee);
	public static Guid MF_VIDEO_MAX_MB_PER_SEC => new(0xe3f2e203, 0xd445, 0x4b8c, 0x92, 0x11, 0xae, 0x39, 0xd, 0x3b, 0xa0, 0x17);
	public static Guid MF_DISABLE_FRAME_CORRUPTION_INFO => new(0x7086e16c, 0x49c5, 0x4201, 0x88, 0x2a, 0x85, 0x38, 0xf3, 0x8c, 0xf1, 0x3a);
}
